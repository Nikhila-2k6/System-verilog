// Code your design here
module vedic_4x4 (
    input  [3:0] a, b,
    output reg [7:0] prod
);
    reg [3:0] a0b0, a1b0, a0b1, a1b1;

    always @(*) begin
        #1; // faster logic - Vedic style
        a0b0 = a[1:0] * b[1:0];
        a1b0 = a[3:2] * b[1:0];
        a0b1 = a[1:0] * b[3:2];
        a1b1 = a[3:2] * b[3:2];
        #1;
        prod = (a1b1 << 4) + ((a1b0 + a0b1) << 2) + a0b0;
    end
endmodule
module array_multiplier_4x4 (
    input  [3:0] a, b,
    output reg [7:0] prod
);
    integer i;

    always @(*) begin
        prod = 0;
        for (i = 0; i < 4; i = i + 1) begin
            #2; // each step is slower
            if (b[i])
                prod = prod + (a << i);
        end
    end
endmodule

//testbench
// Code your testbench here
// or browse Examples
`timescale 1ns/1ps

module tb_vedic_vs_array;

    reg [3:0] a, b;
    wire [7:0] vedic_out, array_out;
    reg [7:0] expected;

    time start_time, vedic_time, array_time;

    vedic_4x4 vedic_inst (.a(a), .b(b), .prod(vedic_out));
    array_multiplier_4x4 array_inst (.a(a), .b(b), .prod(array_out));

    initial begin
        $display("=== Vedic vs Array Multiplier Real Delay Comparison ===");

        a = 4'd7; b = 4'd6;
        expected = a * b;

        // Start measurement
        start_time = $time;

        fork
            begin
                wait (vedic_out == expected);
                vedic_time = $time - start_time;
            end
            begin
                wait (array_out == expected);
                array_time = $time - start_time;
            end
        join

        $display("Inputs: A = %0d, B = %0d, Expected = %0d", a, b, expected);
        $display("Vedic Out = %0d, Delay = %0dns", vedic_out, vedic_time);
        $display("Array Out = %0d, Delay = %0dns", array_out, array_time);
        $display("Result: Vedic is faster by %0dns\n", array_time - vedic_time);
        $finish;
    end
endmodule

//output
# KERNEL: === Vedic vs Array Multiplier Real Delay Comparison ===
# KERNEL: Inputs: A = 7, B = 6, Expected = 42
# KERNEL: Vedic Out = 42, Delay = 2ns
# KERNEL: Array Out = 42, Delay = 6ns
# KERNEL: Result: Vedic is faster by 4ns
