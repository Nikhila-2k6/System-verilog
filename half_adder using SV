//half adder
// Code your design here
module addition(a,b,s,c);
  input a,b;
  output s,c;
  assign s=a^b;
  assign c=a&b;
endmodule
interface inter;
  logic a;
  logic b;
  logic s;
  logic c;
endinterface


 // test bench code
class generator;
  logic a;
  logic b;
  mailbox mbx;
  task run();
    $monitor("generated data a=%0b b=%0b",a,b);
    a=0;b=0;mbx.put({a,b});#10;                       
    /*instead of these 4 statements we can write for loop        
    fot(integer i=0;i<4;i=i+1)begin
    {a,b}=i;  mbx.put({a,b});*/
    
    a=0;b=1;mbx.put({a,b});#10;                               
    a=1;b=0;mbx.put({a,b});#10;                                   
    a=1;b=1;mbx.put({a,b});#10;
  endtask
endclass
class driver;
  virtual inter vif;
  logic [1:0] data;
  logic a,b;
  mailbox mbx;
  task run();
    repeat (4) begin
    mbx.get(data);
    a=data[1];
    b=data[0];
    vif.a=a;
    vif.b=b;
    #10;
      $display("a=%0b b=%0b s=%0b c=%0b",a,b,vif.s,vif.c);
    end
  endtask
endclass

module tb;
  inter inf();
  addition u1(.a(inf.a),.b(inf.b),.s(inf.s),.c(inf.c));
  generator gen;
  driver div;
  mailbox mbx;
  initial
    begin
      gen=new();
      div=new();
      mbx=new();
      div.vif=inf;
      gen.mbx=mbx;
      div.mbx=mbx;
      fork
        gen.run();
        div.run();
      join
    end
endmodule

//output
generated data a=0 b=0
a=0 b=0 s=0 c=0
generated data a=0 b=1
a=0 b=1 s=1 c=0
generated data a=1 b=0
a=1 b=0 s=1 c=0
generated data a=1 b=1
a=1 b=1 s=0 c=1

